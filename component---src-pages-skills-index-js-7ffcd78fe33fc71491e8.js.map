{"version":3,"file":"component---src-pages-skills-index-js-7ffcd78fe33fc71491e8.js","mappings":"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","sources":["webpack://personal_website/./src/pages/skills/courses.js","webpack://personal_website/./src/pages/skills/index.js","webpack://personal_website/./src/pages/skills/skillset.js"],"sourcesContent":["import React, { useRef, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport styled from 'styled-components';\nimport { StaticQuery, graphql } from 'gatsby';\nimport { Icon } from '@components/icons';\n\nconst categoryColors = {\n  CS: { color: '#32a838', fontWeight: 'bold' },\n  Math: { color: '#328da8', fontWeight: 'bold' },\n  Stats: { color: '#a33441', fontWeight: 'bold' },\n};\n\n/*\nconst TableContainer = styled.div`\n  overflow-x: auto; // Enables horizontal scrolling on smaller screens\n`;\n*/\n\nconst CoursesTable = () => {\n  const revealCourses = useRef([]);\n  const [sortedData, setSortedData] = useState([]);\n\n  useEffect(() => {\n    // Sort data when the component first mounts\n    const sorted = [...sortedData].sort((a, b) => {\n      // Sort by subject first\n      if (a.subject === b.subject) {\n        return a.no.localeCompare(b.no); // Sort by course number if subjects are equal\n      }\n      return a.subject.localeCompare(b.subject); // Sort by subject if they are different\n    });\n    setSortedData(sorted); // Set the sorted data to the state\n  }, [sortedData]);\n\n  return (\n    <StaticQuery\n      query={graphql`\n        query {\n          allMarkdownRemark(\n            filter: { fileAbsolutePath: { regex: \"/courses/\" } }\n            sort: { fields: [frontmatter___date], order: DESC }\n          ) {\n            edges {\n              node {\n                frontmatter {\n                  subject\n                  no\n                  name\n                  term\n                  external\n                }\n              }\n            }\n          }\n        }\n      `}\n      render={data => {\n        const courses = data.allMarkdownRemark.edges.map(({ node }) => node.frontmatter);\n\n        // Once data is fetched, set the sorted data to the state\n        if (sortedData.length === 0) {\n          setSortedData(courses);\n        }\n\n        return (\n          <StyledTableContainer>\n            <thead>\n              <tr>\n                <th>Subject</th>\n                <th>Number</th>\n                <th>Name</th>\n                <th>Term</th>\n                <th>Registrar</th>\n              </tr>\n            </thead>\n            <tbody>\n              {sortedData.map((course, index) => {\n                const { subject, no, name, term, external } = course;\n                return (\n                  <tr key={index} ref={el => (revealCourses.current[index] = el)}>\n                    <td style={categoryColors[subject] || { fontWeight: 'bold' }}>{subject}</td>\n                    <td className=\"no\">{no}</td>\n                    <td className=\"name\">{name}</td>\n                    <td className=\"term\">{term}</td>\n                    <td className=\"links\">\n                      <div>\n                        {external && (\n                          <a href={external} aria-label=\"External Link\">\n                            <Icon name=\"External\" />\n                          </a>\n                        )}\n                      </div>\n                    </td>\n                  </tr>\n                );\n              })}\n            </tbody>\n          </StyledTableContainer>\n        );\n      }}\n    />\n  );\n};\n\nCoursesTable.propTypes = {\n  data: PropTypes.object.isRequired,\n};\n\nexport default CoursesTable;","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Helmet } from 'react-helmet';\nimport styled from 'styled-components';\nimport { Layout } from '@components';\nimport Skillset from './skillset';\nimport CoursesTable from './courses';\n\nconst StyledMainContainer = styled.main`\n  & > header {\n    margin-bottom: 100px;\n    text-align: center;\n\n    a {\n      &:hover,\n      &:focus {\n        cursor: url(\"data:image/svg+xml;utf8,<svg xmlns='http://www.w3.org/2000/svg' width='40' height='48' viewport='0 0 100 100' style='fill:black;font-size:24px;'><text y='50%'>âš¡</text></svg>\")\n            20 0,\n          auto;\n      }\n    }\n  }\n\n  footer {\n    ${({ theme }) => theme.mixins.flexBetween};\n    width: 100%;\n    margin-top: 20px;\n  }\n`;\n\nconst SkillPage = ({ location }) => (\n  <Layout location={location}>\n    <Helmet title=\"Skills\" />\n\n    <StyledMainContainer>\n      <header>\n        <h1 className=\"big-heading\">Skills and Courses</h1>\n        <h3 className=\"subtitle\">\n          <p>This page contains detalied lists of my skills and the courses I've taken at UCLA!</p>\n        </h3>\n      </header>\n      <Skillset />\n      <CoursesTable />\n    </StyledMainContainer>\n  </Layout>\n);\n\nSkillPage.propTypes = {\n  location: PropTypes.object.isRequired,\n  data: PropTypes.object.isRequired,\n};\n\nexport default SkillPage;\n","import React, { useState, useEffect, useRef } from 'react';\nimport { useStaticQuery, graphql } from 'gatsby';\nimport { CSSTransition } from 'react-transition-group';\nimport styled from 'styled-components';\nimport { srConfig } from '@config';\nimport { KEY_CODES } from '@utils';\nimport sr from '@utils/sr';\nimport { usePrefersReducedMotion } from '@hooks';\n\nconst StyledSkillsetSection = styled.section`\n  max-width: 900px; //TODO: may want to increase this\n\n  .inner {\n    display: flex;\n\n    @media (max-width: 600px) {\n      display: block;\n    }\n\n    // Prevent container from jumping\n    @media (min-width: 700px) {\n      min-height: 340px;\n    }\n  }\n\n  a {\n    color: #1cf3ff;\n  }\n`;\n\nconst StyledTabList = styled.div`\n  position: relative;\n  z-index: 3;\n  width: max-content;\n  padding: 0;\n  margin: 0;\n  list-style: none;\n\n  @media (max-width: 600px) {\n    display: flex;\n    overflow-x: auto;\n    width: calc(100% + 100px);\n    padding-left: 50px;\n    margin-left: -50px;\n    margin-bottom: 30px;\n  }\n  @media (max-width: 480px) {\n    width: calc(100% + 50px);\n    padding-left: 25px;\n    margin-left: -25px;\n  }\n\n  li {\n    &:first-of-type {\n      @media (max-width: 600px) {\n        margin-left: 50px;\n      }\n      @media (max-width: 480px) {\n        margin-left: 25px;\n      }\n    }\n    &:last-of-type {\n      @media (max-width: 600px) {\n        padding-right: 50px;\n      }\n      @media (max-width: 480px) {\n        padding-right: 25px;\n      }\n    }\n  }\n`;\n\nconst StyledTabButton = styled.button`\n  display: flex;\n  align-items: center;\n  width: 100%;\n  height: var(--tab-height);\n  padding: 0 20px 2px;\n  border-left: 2px solid var(--lightest-navy);\n  background-color: transparent;\n  color: ${({ isActive }) => (isActive ? 'var(--green)' : 'var(--slate)')};\n  font-family: var(--font-mono);\n  font-size: var(--fz-xs);\n  text-align: left;\n  white-space: nowrap;\n\n  @media (max-width: 768px) {\n    padding: 0 15px 2px;\n  }\n  @media (max-width: 600px) {\n    min-width: 120px;\n    padding: 0 15px;\n    border-left: 0;\n    border-bottom: 2px solid var(--lightest-navy);\n    text-align: center;\n  }\n\n  &:hover,\n  &:focus {\n    background-color: var(--light-navy);\n  }\n`;\n\nconst StyledHighlight = styled.div`\n  position: absolute;\n  top: 0;\n  left: 0;\n  z-index: 10;\n  width: 2px;\n  height: var(--tab-height);\n  border-radius: var(--border-radius);\n  background: var(--green);\n  transform: translateY(calc(${({ activeTabId }) => activeTabId} * var(--tab-height)));\n  transition: transform 0.25s cubic-bezier(0.645, 0.045, 0.355, 1);\n  transition-delay: 0.1s;\n\n  @media (max-width: 600px) {\n    top: auto;\n    bottom: 0;\n    width: 100%;\n    max-width: var(--tab-width);\n    height: 2px;\n    margin-left: 50px;\n    transform: translateX(calc(${({ activeTabId }) => activeTabId} * var(--tab-width)));\n  }\n  @media (max-width: 480px) {\n    margin-left: 25px;\n  }\n`;\n\nconst StyledTabPanels = styled.div`\n  position: relative;\n  width: 100%;\n  margin-left: 20px;\n\n  @media (max-width: 600px) {\n    margin-left: 0;\n  }\n`;\n\nconst StyledTabPanel = styled.div`\n  width: 100%;\n  height: auto;\n  padding: 10px 5px;\n\n  h3 {\n    margin-bottom: 2px;\n    font-size: var(--fz-xxl);\n    font-weight: 500;\n    line-height: 1.3;\n\n    .skill {\n      color: var(--green);\n    }\n  }\n\n  .range {\n    margin-bottom: 25px;\n    color: var(--light-slate);\n    font-family: var(--font-mono);\n    font-size: var(--fz-xs);\n  }\n`;\n\nconst Skillset = () => {\n  const data = useStaticQuery(graphql`\n    query {\n      Skillset: allMarkdownRemark(\n        filter: { fileAbsolutePath: { regex: \"/skillset/\" } }\n        sort: { fields: [frontmatter___rank], order: ASC }\n      ) {\n        edges {\n          node {\n            frontmatter {\n              rank\n              skill\n              url\n            }\n            html\n          }\n        }\n      }\n    }\n  `);\n\n  const SkillsetData = data.Skillset.edges;\n\n  const [activeTabId, setActiveTabId] = useState(0);\n  const [tabFocus, setTabFocus] = useState(null);\n  const tabs = useRef([]);\n  const revealContainer = useRef(null);\n  const prefersReducedMotion = usePrefersReducedMotion();\n\n  useEffect(() => {\n    if (prefersReducedMotion) {\n      return;\n    }\n\n    sr.reveal(revealContainer.current, srConfig());\n  }, []);\n\n  const focusTab = () => {\n    if (tabs.current[tabFocus]) {\n      tabs.current[tabFocus].focus();\n      return;\n    }\n    // If we're at the end, go to the start\n    if (tabFocus >= tabs.current.length) {\n      setTabFocus(0);\n    }\n    // If we're at the start, move to the end\n    if (tabFocus < 0) {\n      setTabFocus(tabs.current.length - 1);\n    }\n  };\n\n  // Only re-run the effect if tabFocus changes\n  useEffect(() => focusTab(), [tabFocus]);\n\n  // Focus on tabs when using up & down arrow keys\n  const onKeyDown = e => {\n    switch (e.key) {\n      case KEY_CODES.ARROW_UP: {\n        e.preventDefault();\n        setTabFocus(tabFocus - 1);\n        break;\n      }\n\n      case KEY_CODES.ARROW_DOWN: {\n        e.preventDefault();\n        setTabFocus(tabFocus + 1);\n        break;\n      }\n\n      default: {\n        break;\n      }\n    }\n  };\n\n  return (\n    <StyledSkillsetSection id=\"Skillset\" ref={revealContainer}>\n      <h2>My Skill Set</h2>\n\n      <div className=\"inner\">\n        <StyledTabList role=\"tablist\" aria-label=\"Job tabs\" onKeyDown={e => onKeyDown(e)}>\n          {SkillsetData &&\n            SkillsetData.map(({ node }, i) => {\n              const { skill } = node.frontmatter;\n              return (\n                <StyledTabButton\n                  key={i}\n                  isActive={activeTabId === i}\n                  onClick={() => setActiveTabId(i)}\n                  ref={el => (tabs.current[i] = el)}\n                  id={`tab-${i}`}\n                  role=\"tab\"\n                  tabIndex={activeTabId === i ? '0' : '-1'}\n                  aria-selected={activeTabId === i ? true : false}\n                  aria-controls={`panel-${i}`}\n                >\n                  <span>{skill}</span>\n                </StyledTabButton>\n              );\n            })}\n          <StyledHighlight activeTabId={activeTabId} />\n        </StyledTabList>\n\n        <StyledTabPanels>\n          {SkillsetData &&\n            SkillsetData.map(({ node }, i) => {\n              const { frontmatter, html } = node;\n              const { skill, url, rank } = frontmatter;\n\n              return (\n                <CSSTransition key={i} in={activeTabId === i} timeout={250} classNames=\"fade\">\n                  <StyledTabPanel\n                    id={`panel-${i}`}\n                    role=\"tabpanel\"\n                    tabIndex={activeTabId === i ? '0' : '-1'}\n                    aria-labelledby={`tab-${i}`}\n                    aria-hidden={activeTabId !== i}\n                    hidden={activeTabId !== i}\n                  >\n                    <h3>\n                      <span className=\"skill\">\n                        <a href={url} target=\"_blank\" className=\"inline-link\" rel=\"noreferrer\">\n                          {rank}\n                          {'. '}\n                          {skill}\n                        </a>\n                      </span>\n                    </h3>\n\n                    <div dangerouslySetInnerHTML={{ __html: html }} />\n                  </StyledTabPanel>\n                </CSSTransition>\n              );\n            })}\n        </StyledTabPanels>\n      </div>\n    </StyledSkillsetSection>\n  );\n};\n\nexport default Skillset;\n"],"names":["categoryColors","CS","color","fontWeight","Math","Stats","revealCourses","useRef","sortedData","setSortedData","useState","useEffect","sorted","sort","a","b","subject","no","localeCompare","StaticQuery","query","render","data","courses","allMarkdownRemark","edges","map","node","frontmatter","length","StyledTableContainer","course","index","name","term","external","key","ref","el","current","style","className","href","StyledMainContainer","styled","theme","mixins","flexBetween","location","title","StyledSkillsetSection","StyledTabList","StyledTabButton","isActive","StyledHighlight","activeTabId","StyledTabPanels","StyledTabPanel","SkillsetData","useStaticQuery","Skillset","setActiveTabId","tabFocus","setTabFocus","tabs","revealContainer","prefersReducedMotion","usePrefersReducedMotion","sr","srConfig","focus","id","role","onKeyDown","e","KEY_CODES","preventDefault","i","skill","onClick","tabIndex","html","url","rank","in","timeout","classNames","hidden","target","rel","dangerouslySetInnerHTML","__html"],"sourceRoot":""}